# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Score(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_blood=None, first_tower=None, first_inhibitor=None, first_dragon=None, team1_tower_kills=None, team1_inhibitor_kills=None, team1_dragon_kills=None, team1_baron_kills=None, team1_rift_herald_kills=None, team2_tower_kills=None, team2_inhibitor_kills=None, team2_dragon_kills=None, team2_baron_kills=None, team2_rift_herald_kills=None):  # noqa: E501
        """Score - a model defined in OpenAPI

        :param first_blood: The first_blood of this Score.  # noqa: E501
        :type first_blood: int
        :param first_tower: The first_tower of this Score.  # noqa: E501
        :type first_tower: int
        :param first_inhibitor: The first_inhibitor of this Score.  # noqa: E501
        :type first_inhibitor: int
        :param first_dragon: The first_dragon of this Score.  # noqa: E501
        :type first_dragon: int
        :param team1_tower_kills: The team1_tower_kills of this Score.  # noqa: E501
        :type team1_tower_kills: int
        :param team1_inhibitor_kills: The team1_inhibitor_kills of this Score.  # noqa: E501
        :type team1_inhibitor_kills: int
        :param team1_dragon_kills: The team1_dragon_kills of this Score.  # noqa: E501
        :type team1_dragon_kills: int
        :param team1_baron_kills: The team1_baron_kills of this Score.  # noqa: E501
        :type team1_baron_kills: int
        :param team1_rift_herald_kills: The team1_rift_herald_kills of this Score.  # noqa: E501
        :type team1_rift_herald_kills: int
        :param team2_tower_kills: The team2_tower_kills of this Score.  # noqa: E501
        :type team2_tower_kills: int
        :param team2_inhibitor_kills: The team2_inhibitor_kills of this Score.  # noqa: E501
        :type team2_inhibitor_kills: int
        :param team2_dragon_kills: The team2_dragon_kills of this Score.  # noqa: E501
        :type team2_dragon_kills: int
        :param team2_baron_kills: The team2_baron_kills of this Score.  # noqa: E501
        :type team2_baron_kills: int
        :param team2_rift_herald_kills: The team2_rift_herald_kills of this Score.  # noqa: E501
        :type team2_rift_herald_kills: int
        """
        self.openapi_types = {
            'first_blood': int,
            'first_tower': int,
            'first_inhibitor': int,
            'first_dragon': int,
            'team1_tower_kills': int,
            'team1_inhibitor_kills': int,
            'team1_dragon_kills': int,
            'team1_baron_kills': int,
            'team1_rift_herald_kills': int,
            'team2_tower_kills': int,
            'team2_inhibitor_kills': int,
            'team2_dragon_kills': int,
            'team2_baron_kills': int,
            'team2_rift_herald_kills': int
        }

        self.attribute_map = {
            'first_blood': 'firstBlood',
            'first_tower': 'firstTower',
            'first_inhibitor': 'firstInhibitor',
            'first_dragon': 'firstDragon',
            'team1_tower_kills': 'team1_tower_kills',
            'team1_inhibitor_kills': 'team1_inhibitor_kills',
            'team1_dragon_kills': 'team1_dragon_kills',
            'team1_baron_kills': 'team1_baron_kills',
            'team1_rift_herald_kills': 'team1_rift_herald_kills',
            'team2_tower_kills': 'team2_tower_kills',
            'team2_inhibitor_kills': 'team2_inhibitor_kills',
            'team2_dragon_kills': 'team2_dragon_kills',
            'team2_baron_kills': 'team2_baron_kills',
            'team2_rift_herald_kills': 'team2_rift_herald_kills'
        }

        self._first_blood = first_blood
        self._first_tower = first_tower
        self._first_inhibitor = first_inhibitor
        self._first_dragon = first_dragon
        self._team1_tower_kills = team1_tower_kills
        self._team1_inhibitor_kills = team1_inhibitor_kills
        self._team1_dragon_kills = team1_dragon_kills
        self._team1_baron_kills = team1_baron_kills
        self._team1_rift_herald_kills = team1_rift_herald_kills
        self._team2_tower_kills = team2_tower_kills
        self._team2_inhibitor_kills = team2_inhibitor_kills
        self._team2_dragon_kills = team2_dragon_kills
        self._team2_baron_kills = team2_baron_kills
        self._team2_rift_herald_kills = team2_rift_herald_kills

    @classmethod
    def from_dict(cls, dikt) -> 'Score':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Score of this Score.  # noqa: E501
        :rtype: Score
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_blood(self):
        """Gets the first_blood of this Score.


        :return: The first_blood of this Score.
        :rtype: int
        """
        return self._first_blood

    @first_blood.setter
    def first_blood(self, first_blood):
        """Sets the first_blood of this Score.


        :param first_blood: The first_blood of this Score.
        :type first_blood: int
        """
        if first_blood is None:
            raise ValueError("Invalid value for `first_blood`, must not be `None`")  # noqa: E501

        self._first_blood = first_blood

    @property
    def first_tower(self):
        """Gets the first_tower of this Score.


        :return: The first_tower of this Score.
        :rtype: int
        """
        return self._first_tower

    @first_tower.setter
    def first_tower(self, first_tower):
        """Sets the first_tower of this Score.


        :param first_tower: The first_tower of this Score.
        :type first_tower: int
        """
        if first_tower is None:
            raise ValueError("Invalid value for `first_tower`, must not be `None`")  # noqa: E501

        self._first_tower = first_tower

    @property
    def first_inhibitor(self):
        """Gets the first_inhibitor of this Score.


        :return: The first_inhibitor of this Score.
        :rtype: int
        """
        return self._first_inhibitor

    @first_inhibitor.setter
    def first_inhibitor(self, first_inhibitor):
        """Sets the first_inhibitor of this Score.


        :param first_inhibitor: The first_inhibitor of this Score.
        :type first_inhibitor: int
        """
        if first_inhibitor is None:
            raise ValueError("Invalid value for `first_inhibitor`, must not be `None`")  # noqa: E501

        self._first_inhibitor = first_inhibitor

    @property
    def first_dragon(self):
        """Gets the first_dragon of this Score.


        :return: The first_dragon of this Score.
        :rtype: int
        """
        return self._first_dragon

    @first_dragon.setter
    def first_dragon(self, first_dragon):
        """Sets the first_dragon of this Score.


        :param first_dragon: The first_dragon of this Score.
        :type first_dragon: int
        """
        if first_dragon is None:
            raise ValueError("Invalid value for `first_dragon`, must not be `None`")  # noqa: E501

        self._first_dragon = first_dragon

    @property
    def team1_tower_kills(self):
        """Gets the team1_tower_kills of this Score.


        :return: The team1_tower_kills of this Score.
        :rtype: int
        """
        return self._team1_tower_kills

    @team1_tower_kills.setter
    def team1_tower_kills(self, team1_tower_kills):
        """Sets the team1_tower_kills of this Score.


        :param team1_tower_kills: The team1_tower_kills of this Score.
        :type team1_tower_kills: int
        """
        if team1_tower_kills is None:
            raise ValueError("Invalid value for `team1_tower_kills`, must not be `None`")  # noqa: E501

        self._team1_tower_kills = team1_tower_kills

    @property
    def team1_inhibitor_kills(self):
        """Gets the team1_inhibitor_kills of this Score.


        :return: The team1_inhibitor_kills of this Score.
        :rtype: int
        """
        return self._team1_inhibitor_kills

    @team1_inhibitor_kills.setter
    def team1_inhibitor_kills(self, team1_inhibitor_kills):
        """Sets the team1_inhibitor_kills of this Score.


        :param team1_inhibitor_kills: The team1_inhibitor_kills of this Score.
        :type team1_inhibitor_kills: int
        """
        if team1_inhibitor_kills is None:
            raise ValueError("Invalid value for `team1_inhibitor_kills`, must not be `None`")  # noqa: E501

        self._team1_inhibitor_kills = team1_inhibitor_kills

    @property
    def team1_dragon_kills(self):
        """Gets the team1_dragon_kills of this Score.


        :return: The team1_dragon_kills of this Score.
        :rtype: int
        """
        return self._team1_dragon_kills

    @team1_dragon_kills.setter
    def team1_dragon_kills(self, team1_dragon_kills):
        """Sets the team1_dragon_kills of this Score.


        :param team1_dragon_kills: The team1_dragon_kills of this Score.
        :type team1_dragon_kills: int
        """
        if team1_dragon_kills is None:
            raise ValueError("Invalid value for `team1_dragon_kills`, must not be `None`")  # noqa: E501

        self._team1_dragon_kills = team1_dragon_kills

    @property
    def team1_baron_kills(self):
        """Gets the team1_baron_kills of this Score.


        :return: The team1_baron_kills of this Score.
        :rtype: int
        """
        return self._team1_baron_kills

    @team1_baron_kills.setter
    def team1_baron_kills(self, team1_baron_kills):
        """Sets the team1_baron_kills of this Score.


        :param team1_baron_kills: The team1_baron_kills of this Score.
        :type team1_baron_kills: int
        """
        if team1_baron_kills is None:
            raise ValueError("Invalid value for `team1_baron_kills`, must not be `None`")  # noqa: E501

        self._team1_baron_kills = team1_baron_kills

    @property
    def team1_rift_herald_kills(self):
        """Gets the team1_rift_herald_kills of this Score.


        :return: The team1_rift_herald_kills of this Score.
        :rtype: int
        """
        return self._team1_rift_herald_kills

    @team1_rift_herald_kills.setter
    def team1_rift_herald_kills(self, team1_rift_herald_kills):
        """Sets the team1_rift_herald_kills of this Score.


        :param team1_rift_herald_kills: The team1_rift_herald_kills of this Score.
        :type team1_rift_herald_kills: int
        """
        if team1_rift_herald_kills is None:
            raise ValueError("Invalid value for `team1_rift_herald_kills`, must not be `None`")  # noqa: E501

        self._team1_rift_herald_kills = team1_rift_herald_kills

    @property
    def team2_tower_kills(self):
        """Gets the team2_tower_kills of this Score.


        :return: The team2_tower_kills of this Score.
        :rtype: int
        """
        return self._team2_tower_kills

    @team2_tower_kills.setter
    def team2_tower_kills(self, team2_tower_kills):
        """Sets the team2_tower_kills of this Score.


        :param team2_tower_kills: The team2_tower_kills of this Score.
        :type team2_tower_kills: int
        """
        if team2_tower_kills is None:
            raise ValueError("Invalid value for `team2_tower_kills`, must not be `None`")  # noqa: E501

        self._team2_tower_kills = team2_tower_kills

    @property
    def team2_inhibitor_kills(self):
        """Gets the team2_inhibitor_kills of this Score.


        :return: The team2_inhibitor_kills of this Score.
        :rtype: int
        """
        return self._team2_inhibitor_kills

    @team2_inhibitor_kills.setter
    def team2_inhibitor_kills(self, team2_inhibitor_kills):
        """Sets the team2_inhibitor_kills of this Score.


        :param team2_inhibitor_kills: The team2_inhibitor_kills of this Score.
        :type team2_inhibitor_kills: int
        """
        if team2_inhibitor_kills is None:
            raise ValueError("Invalid value for `team2_inhibitor_kills`, must not be `None`")  # noqa: E501

        self._team2_inhibitor_kills = team2_inhibitor_kills

    @property
    def team2_dragon_kills(self):
        """Gets the team2_dragon_kills of this Score.


        :return: The team2_dragon_kills of this Score.
        :rtype: int
        """
        return self._team2_dragon_kills

    @team2_dragon_kills.setter
    def team2_dragon_kills(self, team2_dragon_kills):
        """Sets the team2_dragon_kills of this Score.


        :param team2_dragon_kills: The team2_dragon_kills of this Score.
        :type team2_dragon_kills: int
        """
        if team2_dragon_kills is None:
            raise ValueError("Invalid value for `team2_dragon_kills`, must not be `None`")  # noqa: E501

        self._team2_dragon_kills = team2_dragon_kills

    @property
    def team2_baron_kills(self):
        """Gets the team2_baron_kills of this Score.


        :return: The team2_baron_kills of this Score.
        :rtype: int
        """
        return self._team2_baron_kills

    @team2_baron_kills.setter
    def team2_baron_kills(self, team2_baron_kills):
        """Sets the team2_baron_kills of this Score.


        :param team2_baron_kills: The team2_baron_kills of this Score.
        :type team2_baron_kills: int
        """
        if team2_baron_kills is None:
            raise ValueError("Invalid value for `team2_baron_kills`, must not be `None`")  # noqa: E501

        self._team2_baron_kills = team2_baron_kills

    @property
    def team2_rift_herald_kills(self):
        """Gets the team2_rift_herald_kills of this Score.


        :return: The team2_rift_herald_kills of this Score.
        :rtype: int
        """
        return self._team2_rift_herald_kills

    @team2_rift_herald_kills.setter
    def team2_rift_herald_kills(self, team2_rift_herald_kills):
        """Sets the team2_rift_herald_kills of this Score.


        :param team2_rift_herald_kills: The team2_rift_herald_kills of this Score.
        :type team2_rift_herald_kills: int
        """
        if team2_rift_herald_kills is None:
            raise ValueError("Invalid value for `team2_rift_herald_kills`, must not be `None`")  # noqa: E501

        self._team2_rift_herald_kills = team2_rift_herald_kills
